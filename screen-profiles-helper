#! /usr/bin/env python
#
#    GNU screen-profiles-helper
#    Copyright (C) 2008 Canonical Ltd.
#
#    Authors: Nick Barcet <nick.barcet@ubuntu.com>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import sys, os, os.path, time, string, commands
from ConfigParser import SafeConfigParser
from snack import *

# Command presets for windows creation
cmd=(   ("System activity", "top", "top"),
        ("System log", "log", "watch -n 10 tail -n 5 /var/log/syslog /var/log/auth.log /var/log/dmesg"),
        ("Disk and ram usage", "mem", 'watch -n 30 "df -h; echo ""; free -mt"'))


def ioctl_GWINSZ(fd):                  #### TABULATION FUNCTIONS
    try:                                ### Discover terminal width
        import fcntl, termios, struct, os
        cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))
    except:
        return None
    return cr

def terminal_size():                    ### decide on *some* terminal size
    cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)  # try open fds
    if not cr:                                                  # ...then ctty
        try:
            fd = os.open(os.ctermid(), os.O_RDONLY)
            cr = ioctl_GWINSZ(fd)
            os.close(fd)
        except:
            pass
    if not cr:                            # env vars or finally defaults
        try:
            cr = (env['LINES'], env['COLUMNS'])
        except:
            cr = (25, 80)
    return int(cr[1]-5), int(cr[0]-5)         # reverse rows, cols

def menu(screen, size, isInstalled):
    if isInstalled:
        installtext="Remove screen by default at login"
    else:
        installtext="Install screen by default at login"


    li = Listbox(height = 5, width = 60, returnExit = 1)
    li.append("Help", 1)
    li.append("Change screen profile", 2)
    li.append("Create new window(s)", 3)
    li.append("Manage default windows", 4)
    li.append(installtext, 5)
    bb = ButtonBar(screen, (("Ok", "ok"), ("Exit", "exit")), compact = 1)

    g = GridForm(screen, "GNU Screen Profiles Menu", 1, 2)
    g.add(li, 0, 0, padding=(4,2,4,2))
    g.add(bb, 0, 1, padding=(1,1,0,0))

    if bb.buttonPressed(g.runOnce()) == "exit":
        return 0
    else:
        return li.current()

def messagebox(screen, width, height, title, text, \
    scroll=0, \
    buttons=(("Ok", "ok"),("Cancel", "cancel")) ):

    t = Textbox(width, height, text, scroll=scroll )
    bb = ButtonBar(screen, buttons, compact = 1)
    g = GridForm(screen, title, 1, 2)
    g.add(t, 0, 0, padding=(0,0,0,0))
    g.add(bb, 0, 1, padding=(1,1,0,0))

    return bb.buttonPressed(g.runOnce())

def help(screen, size, config):
    f=file('/usr/share/doc/screen-profiles/help.txt')
    text=f.read()
    f.close()

    t = Textbox(74, 19, text, scroll=1)
    bb = ButtonBar(screen, (("Menu", "menu"), ("Exit", "exit")), compact = 1)
    
    if (config.get('Defaults', 'help') == "on"):
        cbOn = 1
    else:
        cbOn = 0

    cb=Checkbox("Display this help on startup", isOn=cbOn)
    
    g = GridForm(screen, "GNU Screen Profiles Help", 1, 3)
    g.add(t, 0, 0, padding=(0,0,0,0))
    g.add(cb, 0, 1, padding=(1,0,0,0))
    g.add(bb, 0, 2, padding=(1,1,0,0))

    button = bb.buttonPressed(g.runOnce())
    
    if cb.value() != cbOn:
        #Check box value has change, write config file
        if not config.has_section('Defaults'):
            config.add_section('Defaults')

        if cb.value() == 1:
            value = "on"
        else:
            value = "off"

        config.set('Defaults','help',value)
        configfile=open(os.getenv("HOME")+'/.screen-profiles-helper', 'wb')
        try:
            config.write(configfile)
        finally:
            configfile.close()

    if button == "exit":
        return 0
    else:
        return 100

def profile(screen, size):
    li = Listbox(height = 6, width = 60, returnExit = 1)

    for choice in commands.getoutput('select-screen-profile -l').splitlines():
        if choice.startswith("ubuntu"):
            li.append(choice+" <-- recommended", choice)
            li.setCurrent(choice)
        else:
            li.append(choice, choice)

    bb = ButtonBar(screen, (("Apply", "apply"), ("Cancel", "cancel")), compact = 1)

    g = GridForm(screen, "Which profile would you like to use?", 1, 2)
    g.add(li, 0, 0, padding=(4,2,4,2))
    g.add(bb, 0, 1, padding=(1,1,0,0))

    if bb.buttonPressed(g.runOnce()) != "cancel":
        commands.getoutput('select-screen-profile --set %s' % li.current())
        button = messagebox(screen, 60, 2, "Message", "Restart screen to apply the new profile", \
            buttons=(("Ok","ok"), ("Exit", "exit")) )
        if button == "exit":
            return 0

    return 100
    
def newwindow(screen, size):
    title=Entry(8, text="bash", returnExit=1)
    titlel=Label("Title: ")
    command=Entry(20, text="/bin/bash", returnExit=1)
    commandl=Label("Command: ")

    rl=Label("Presets: ")
    if len(cmd) > 10:
        scroll=1
        size=10
    else:
        scroll=0
        size = len(cmd)

    r=CheckboxTree(size, scroll=scroll)
    count=0
    for cur in cmd:
        r.append(cur[0], count)
        count=count+1
        
    cb=Checkbox("Add to default windows")

    bb = ButtonBar(screen, (("Create", "create"), ("Cancel", "cancel")), compact = 1)
    g = GridForm(screen, "Create new window(s):", 2, 5 )
    g.add(titlel, 0, 0, anchorLeft=1,padding=(4,1,0,1))
    g.add(title, 1, 0, anchorLeft=1)
    g.add(commandl, 0, 1, anchorLeft=1, anchorTop=1,padding=(4,0,0,1))
    g.add(command, 1, 1, anchorLeft=1)
    g.add(rl, 0, 2, anchorLeft=1,padding=(4,0,0,1))
    g.add(r, 1, 2)
    g.add(cb, 1, 3, padding=(4,1,0,1))
    g.add(bb, 1, 4, padding=(4,1,0,0))

    if bb.buttonPressed(g.runOnce()) != "cancel":
        sel=r.getSelection()
        if sel:
            for s in sel:
                win='screen -t %s %s' % (cmd[s][1], cmd[s][2])
                commands.getoutput(win)
                if cb.value():
                    appendwindow(win)
        else:
            win='screen -t %s %s' % (title.value(), command.value())
            commands.getoutput(win)
            if cb.value():
                appendwindow(win)

    return 100
    
def appendwindow(win):
    f=open(os.getenv("HOME")+'/.screenrc-windows', 'a')
    try:
        f.write(win+"\n")
        
    except IOError:
        return None

    finally:
        f.close()
        
def readwindows():
    f=open(os.getenv("HOME")+'/.screenrc-windows', 'r')
    try:
        li=[]
        for line in f.readlines():
            if line.startswith("# "):
               # this is a comment
               window=[-1, line]    
            elif line.startswith("#"):
               # this is an inactive window
               window=[0, line.lstrip("#")]
            else:
               window=[1, line]
            li.append(window)

        return li

    except IOError:
        return None

    finally:
        f.close()
        
def writewindows(winlist):
    f=open(os.getenv("HOME")+'/.screenrc-windows', 'w')
    try:
        for win in winlist:
            if win[0] == -1:
                f.write(win[1])
            elif win[0] == 0:
                f.write("#"+win[1])
            else:
                f.write(win[1])

    except IOError:
        return None

    finally:
        f.close()
        
def defaultwindows(screen, size):
    winlist=readwindows()
    
    rl=Label("Windows:")
    r=CheckboxTree(10, scroll=1)
    count=0
    for win in winlist:
       if win[0] != -1:
            r.append(win[1],count,selected=win[0])
       count=count+1
    
    bb = ButtonBar(screen, (("Save", "save"), ("Cancel", "cancel")), compact = 1)
    
    g = GridForm(screen, "Select window(s) to create by default:", 2, 4 )
    g.add(rl, 0, 0, anchorLeft=1, anchorTop=1, padding=(4,0,0,1))
    g.add(r, 1, 0)
    g.add(bb, 1, 1, padding=(4,1,0,0))
    
    if bb.buttonPressed(g.runOnce()) != "cancel":
        count=0
        for win in winlist:
            if win[0] != -1:
                win[0] = r.getEntryValue(count)[1]
            count=count+1
            
        writewindows(winlist)
        
    return 100
    
def install(screen, size, isInstalled):
    if not isInstalled:
        out = commands.getoutput("bash /usr/share/screen-profiles/screen-install")
        if out == "":
            out = "Screen will be launched automatically next time you login."

        button = messagebox(screen, 60, 2, "Message", out, \
        buttons=(("Ok","ok"), ("Exit", "exit")) )
        if button == "exit":
            return 0

        return 100
    else:
        out = commands.getoutput("bash /usr/share/screen-profiles/screen-remove")
        if out == "":
            out = "Screen will not be used next time you login."

        button = messagebox(screen, 60, 2, "Message", out, \
        buttons=(("Ok","ok"), ("Exit", "exit")) )
        if button == "exit":
            return 0

        return 101


def main():
    """This is the main loop of our screen helper.
    """
    size = terminal_size()
    screen = SnackScreen()
    screen.drawRootText(1,0,"GNU Screen Profiles Helper")
    screen.pushHelpLine("<Tab>/<Alt-Tab> between elements | <Return> Validates")

    config = SafeConfigParser()
    config.read(os.getenv("HOME")+'/.screen-profiles-helper')
    if config.has_option('Defaults', 'help'):
        showhelp=config.get('Defaults', 'help')
    else:
        showhelp="on"

    isInstalled = (commands.getoutput('grep screen-launcher '+(os.getenv("HOME")+'/.bashrc')) != "")

    if showhelp == "on" :
        tag = help(screen, size, config)
    else:
        tag = 100

    while tag > 0 :
        tag = menu(screen, size, isInstalled)
        if tag == 1:
            tag = help(screen, size, config)
        elif tag == 2:
            tag = profile(screen, size)
        elif tag == 3:
            tag = newwindow(screen, size)
        elif tag == 4:
            tag = defaultwindows(screen, size)
        elif tag == 5:
            tag = install(screen, size, isInstalled)
            isInstalled=(tag == 100)

    screen.finish()
    sys.exit(0)


if __name__ == "__main__": main()
