#!/bin/sh -e
#
#    disk_io: calculate the disk io rate
#    Copyright (C) 2010 Canonical Ltd.
#
#    Authors: Dustin Kirkland <kirkland@canonical.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

PKG="byobu"
DATA="$HOME/.$PKG"
color 2>/dev/null || color() { true; }
getdisk() {
	local t=""
	if [ -L "${1}" ]; then
		command -v greadlink >/dev/null && READLINK=greadlink || READLINK=readlink
		t=$($READLINK -f "$1")
	else
		t="$1"
	fi
	t="${t##*/}";
	rtrim "$t" "0-9"
}

[ "$UTF8" = "1" ] && ICON_RD="◀" || ICON_RD="<"
[ "$UTF8" = "1" ] && ICON_WR="▶" || ICON_WR=">"

# Default to disk providing /, but let users override with MONITORED_DISK
[ -z "$MONITORED_DISK" ] && MP="/" ||  MP="$MONITORED_DISK"

if [ "$1" = "--detail" ]; then
	if command -v iostat >/dev/null; then
		iostat -d -m -h
	else
		echo "Please install iostat if you want detailed information on your disk throughput"
	fi
	exit 0
fi

case "$MP" in
	/dev/*) part="${MP}";;
	*) part=$(awk '$2 == mp { print $1 ; exit(0); }' "mp=$MP" /etc/mtab);;
esac
getdisk "$part"
disk=${_RET}

[ -d "/var/run/screen/S-$USER" ] && DIR="/var/run/screen/S-$USER" || DIR="$DATA"
t2=`date +%s`
for i in "read" "write"; do
	cache="$DIR/$PKG.disk_$i"
	t1=`stat -c %Y "$cache"` 2>/dev/null || t1=0
	unit="kB/s"
	if [ $t2 -le $t1 ]; then
		rate=0
	else
		[ -r "$cache" ] && read x1 < "$cache" || x1=0
		read a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 other < "/sys/block/$disk/stat"
		if [ "$i" = "read" ]; then
			symbol="$ICON_RD"
			x2="$a3"
		else
			symbol="$ICON_WR"
			x2="$a7"
		fi
		echo "$x2" > "$cache"
		rate=$((($x2-$x1) / ($t2 - $t1) * 512 / 1024))
		if [ "$rate" -lt 0 ]; then
			rate=0
		elif [ "$rate" -gt 1024 ]; then
			fpdiv "$rate" 1024 1
			unit="MB/s"
		fi
	fi
	[ "$rate" != "0" ] || continue
	color b M W; printf "%s%s" "$symbol" "$rate"; color -; color M W; printf "%s" "$unit"; color --
done
